<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jonny Reeves - 2016</title><link href="https://jonnyreeves.co.uk/" rel="alternate"></link><link href="https://jonnyreeves.co.uk/feeds/2016.atom.xml" rel="self"></link><id>https://jonnyreeves.co.uk/</id><updated>2016-08-14T21:00:00+01:00</updated><entry><title>Configuring my Windows 10 Home Server</title><link href="https://jonnyreeves.co.uk/2016/configuring-my-windows-10-home-server/" rel="alternate"></link><published>2016-08-14T21:00:00+01:00</published><updated>2016-08-14T21:00:00+01:00</updated><author><name>Jonny Reeves</name></author><id>tag:jonnyreeves.co.uk,2016-08-14:/2016/configuring-my-windows-10-home-server/</id><summary type="html">&lt;p&gt;I used to run Linux on various small NAS devices (most recently a &lt;a href="http://www.dlink.com/uk/en/support/product/dns-320-2-bay-sharecenter-network-storage-enclosure"&gt;D-Link DNS 320&lt;/a&gt; 2 bay device), however I got tired of futzing around with both the hardware and the &lt;a href="https://nas-tweaks.net/371/hdd-installation-of-the-fun_plug-0-7-on-nas-devices/"&gt;esoteric flavor of Linux&lt;/a&gt; you can side-load onto it.  I now run a small &lt;a href="http://www8.hp.com/uk/en/products/proliant-servers/product-detail.html?oid=5379860"&gt;HP Proliant Gen8 Microserver …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to run Linux on various small NAS devices (most recently a &lt;a href="http://www.dlink.com/uk/en/support/product/dns-320-2-bay-sharecenter-network-storage-enclosure"&gt;D-Link DNS 320&lt;/a&gt; 2 bay device), however I got tired of futzing around with both the hardware and the &lt;a href="https://nas-tweaks.net/371/hdd-installation-of-the-fun_plug-0-7-on-nas-devices/"&gt;esoteric flavor of Linux&lt;/a&gt; you can side-load onto it.  I now run a small &lt;a href="http://www8.hp.com/uk/en/products/proliant-servers/product-detail.html?oid=5379860"&gt;HP Proliant Gen8 Microserver&lt;/a&gt; configured with 4GB Ram and 3TB of mirrored storage at home; this system is running Windows 10 Professional (pro is required to use the built-in Remote Desktop server).  Below is a list of software I've found useful.&lt;/p&gt;
&lt;h3&gt;Stablebit DrivePool&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Stablebit DrivePool" src="/images/2016/configuring-windows-10-home-server/drivepool.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stablebit.com/DrivePool"&gt;DrivePool&lt;/a&gt; is the spiritual successor of &lt;a href="https://en.wikipedia.org/wiki/Windows_Home_Server#Drive_Extender"&gt;Drive Extender&lt;/a&gt; which disappeared with the demise of Windows Home Server (why...?!); it allows you to combine drives of any size into one or more 'pools' which are represented by a single drive letter in Windows Explorer; you can continue to add new drives to extend the size of the pool and configure the level of redundancy on a folder-by-folder basis (eg: if you have 3 physical hard-drives in a single pool, you could triplicate your 'My Documents' folder for additional redundancy but only duplicate your 'My Videos' folder to make more space available to the rest of the pool).&lt;/p&gt;
&lt;p&gt;DrivePool can be configured to send you an email should any of the drives fail and is only $29 but a license. &lt;/p&gt;
&lt;h3&gt;Freebyte Task Scheduler&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Freebyte Task Scheduler" src="/images/2016/configuring-windows-10-home-server/fbtasksched.png"&gt;&lt;/p&gt;
&lt;p&gt;I've never got my head around Windows Scheduled tasks; it seems needlessly complicated compared to cron on Linux.  &lt;a href="http://www.freebyte.com/fbtaskscheduler/"&gt;Freebyte Task Scheduler&lt;/a&gt; provides a straight forward GUI for automating tasks under your windows user account and doesn't cost anything.&lt;/p&gt;
&lt;p&gt;To get the most out of it you will want to ensure it automatically starts should your server automatically reboot for updates; although you can simple add a shortcut to your User's startup items, I prefer to use &lt;a href="https://nssm.cc/"&gt;NSSM&lt;/a&gt; (Non-Sucking Service Manager) which you can use to start Freebyte Task Scheduler on system boot (without having to first login); to do this run NSSM from the command line with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nssm install fbtaskscheduler
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the GUI appears, point the application path to your &lt;code&gt;FBTaskScheulder.exe&lt;/code&gt; binary and make sure the 'Log on' tab is configured with your user's account.&lt;/p&gt;
&lt;h3&gt;FastGlacier&lt;/h3&gt;
&lt;p&gt;&lt;img alt="FastGlacier" src="/images/2016/configuring-windows-10-home-server/fastglacier.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://fastglacier.com/"&gt;FastGlacier&lt;/a&gt; copies files to &lt;a href="https://en.wikipedia.org/wiki/Amazon_Glacier"&gt;Amazon Glacier&lt;/a&gt; and provides a drag-and-drop Graphical User Interface and a straight forward command line interface.  I use this to archive my photos and music library, both of which are irreplaceable.&lt;/p&gt;
&lt;p&gt;In order to setup an automated backup, you first need to configure a backup set in the GUI.  Once configured use the following command to automate the archive process in a &lt;code&gt;.bat&lt;/code&gt; file and schedule it with Freebyte Task Scheduler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REM &amp;#39;s&amp;#39; =&amp;gt; start sync without confirmation.
&amp;quot;C:\Program Files\FastGlacier\glacier-sync.exe&amp;quot; my-account-name D:\media\photos eu-west-1 my-backup-set/Pictures s
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;GMVault&lt;/h3&gt;
&lt;p&gt;&lt;img alt="gmvault" src="/images/2016/configuring-windows-10-home-server/gmvault-screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gmvault.org/"&gt;GMVault&lt;/a&gt; can be used to pull down the contents of your GMail so you have an offline copy should you (or someone else!) accidentally delete everything.  Start GMVault for the first time to configure your oauth credentials and then use the following &lt;code&gt;.bat&lt;/code&gt; file to automate your backup and then schedule it with Freebyte Task Scheduler:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;%LOCALAPPDATA%\gmvault\gmvault.bat sync you@gmail.com --type quick --db-dir D:\backup\gmvault\you@gmail.com --emails-only&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;GoogleMusicSync&lt;/h3&gt;
&lt;p&gt;&lt;img alt="googlemusicsync" src="https://raw.githubusercontent.com/jonnyreeves/googlemusicsync/master/googlemusicsync-screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jonnyreeves/googlemusicsync"&gt;GoogleMusicSync&lt;/a&gt; is a little python script I knocked up a few years back to pull down any new tracks I added to Google (Play) Music (either uploaded from the Web UI or purchased from the Play store) - I can then add these to my local library which is stored offline and archived to Amazon Glacier.  This script can be automated using Freebyte Task Scheduler&lt;/p&gt;</content></entry><entry><title>Simple Webpack Prod and Dev Config</title><link href="https://jonnyreeves.co.uk/2016/simple-webpack-prod-and-dev-config/" rel="alternate"></link><published>2016-02-29T21:00:00+00:00</published><updated>2016-02-29T21:00:00+00:00</updated><author><name>Jonny Reeves</name></author><id>tag:jonnyreeves.co.uk,2016-02-29:/2016/simple-webpack-prod-and-dev-config/</id><summary type="html">&lt;p&gt;Webpack 2 is just around the corner with the &lt;a href="https://gist.github.com/sokra/27b24881210b56bbaff7#configuration"&gt;promise of easier command line configuration&lt;/a&gt;, however whilst we're stuck with webpack 1, here's an easy way to split you configuration between your development flow (with hot-module-reloading) and production (with minification).&lt;/p&gt;
&lt;p&gt;The trick revolves around the fact that webpack configuration can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Webpack 2 is just around the corner with the &lt;a href="https://gist.github.com/sokra/27b24881210b56bbaff7#configuration"&gt;promise of easier command line configuration&lt;/a&gt;, however whilst we're stuck with webpack 1, here's an easy way to split you configuration between your development flow (with hot-module-reloading) and production (with minification).&lt;/p&gt;
&lt;p&gt;The trick revolves around the fact that webpack configuration can be a CommonJS module and can pick up on environment variables via Node's &lt;code&gt;process.env&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;Start by modifying your &lt;code&gt;webpack.config.js&lt;/code&gt; file (typically in the root of your project, next to your &lt;code&gt;package.json&lt;/code&gt; file) to look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;webpack&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isProd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Conditionally return a list of plugins to use based on the current environment.&lt;/span&gt;
&lt;span class="c1"&gt;// Repeat this pattern for any other config key (ie: loaders, etc).&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPlugins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="c1"&gt;// Always expose NODE_ENV to webpack, you can now use `process.env.NODE_ENV`&lt;/span&gt;
  &lt;span class="c1"&gt;// inside your code for any environment checks; UglifyJS will automatically&lt;/span&gt;
  &lt;span class="c1"&gt;// drop any unreachable code.&lt;/span&gt;
  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DefinePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;process.env&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;NODE_ENV&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;

  &lt;span class="c1"&gt;// Conditionally add plugins for Production builds.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isProd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optimize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UglifyJsPlugin&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Conditionally add plugins for Development&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Export Webpack configuration.&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getPlugins&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this in place you can now set the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable before invoking webpack's command line tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NODE_ENV=production webpack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are using &lt;a href="http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt/"&gt;npm scripts for your build process&lt;/a&gt;, you can add a &lt;code&gt;start&lt;/code&gt; script to spin up your hot-loading development server and a &lt;code&gt;dist&lt;/code&gt; script for creating your distribution assets for production. (note there's no need to set the &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable outside of production as an empty (&lt;code&gt;undefined&lt;/code&gt;) value will default to false in your webpack config):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;dist&amp;quot;: &amp;quot;NODE_ENV=production webpack&amp;quot;,
  &amp;quot;start&amp;quot;: &amp;quot;webpack&amp;quot;,
}
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Pre-commit Hooks in SmartGit</title><link href="https://jonnyreeves.co.uk/2016/pre-commit-hooks-in-smartgit/" rel="alternate"></link><published>2016-02-28T14:00:00+00:00</published><updated>2016-02-28T14:00:00+00:00</updated><author><name>Jonny Reeves</name></author><id>tag:jonnyreeves.co.uk,2016-02-28:/2016/pre-commit-hooks-in-smartgit/</id><summary type="html">&lt;p&gt;SmartGit is my preferred Git client mainly due to its excellent visual diff tool that it ships with and the ability to easily manage several repositories.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SmartGit diff tool" src="/images/precommit-hooks-in-smartgit/smartgit-screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;One small annoyance (aside from the lack of spell-check in commit messages...) is the way it doesn't inherit your user profile (and therefore your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;SmartGit is my preferred Git client mainly due to its excellent visual diff tool that it ships with and the ability to easily manage several repositories.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SmartGit diff tool" src="/images/precommit-hooks-in-smartgit/smartgit-screenshot.png"&gt;&lt;/p&gt;
&lt;p&gt;One small annoyance (aside from the lack of spell-check in commit messages...) is the way it doesn't inherit your user profile (and therefore your PATH environment variable); this leads to pre-commit hooks failing to find build tools such as Node, especially if you have installed via &lt;a href="https://github.com/creationix/nvm"&gt;NVM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Missing tools errors" src="/images/precommit-hooks-in-smartgit/tool-not-found.png"&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, syntevo have provided a simple fix for this in SmartGit7; you can now edit the contents of the following file (depending on your OS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MacOS: &lt;code&gt;~/Library/Preferences/SmartGit/smartgit.vmoptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;~/.smartgit/smartgit.vmoptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;%APPDATA%\syntevo\SmartGit\smartgit.vmoptions&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my case I needed to expose &lt;code&gt;brew&lt;/code&gt; to SmarGit which was as simple as populating my &lt;code&gt;smartgit.vmoptions&lt;/code&gt; file with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Extend SmartGit PATH to include brew / NVM
path=/usr/local/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget to restart SmartGit after saving this file.&lt;/p&gt;</content></entry></feed>